# -*- coding: utf-8 -*-
"""LVADSUSR84_Divyashish 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fx-JPv4qRYVE5GoxT0kFmOIQGb-lblYg
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
data=pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/auto-mpg.csv")
data.tail()

data.info()

data.describe()

data.isnull().sum()

data['horsepower'] = pd.to_numeric(data['horsepower'], errors='coerce')
mean_horsepower = data['horsepower'].mean()
data['horsepower'].fillna(mean_horsepower, inplace=True)
mean_horsepower = data['displacement'].mean()
data['displacement'].fillna(mean_horsepower, inplace=True)
mean_horsepower = data['acceleration'].mean()
data['acceleration'].fillna(mean_horsepower, inplace=True)

data.isnull().sum()

data.info()

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)

data.shape

sns.histplot(data['mpg'], kde=True)
plt.title('Distribution of Fuel Efficiency (mpg)')
plt.xlabel('mpg')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
numerical_cols = ['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 3, i)
    sns.scatterplot(x=col, y='mpg', data=data)
    plt.title(f'{col} vs. mpg')
plt.tight_layout()
plt.show()



X = data[['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']]
y = data['mpg']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

linear_reg = LinearRegression()
linear_reg.fit(X_train_scaled, y_train)

rf_reg = RandomForestRegressor(n_estimators=100, random_state=42)
rf_reg.fit(X_train_scaled, y_train)

y_pred_linear = linear_reg.predict(X_test_scaled)
y_pred_rf = rf_reg.predict(X_test_scaled)

mse_linear = mean_squared_error(y_test, y_pred_linear)
r2_linear = r2_score(y_test, y_pred_linear)

mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print("Linear Regression - MSE:", mse_linear, "R-squared:", r2_linear)
print("Random Forest Regressor - MSE:", mse_rf, "R-squared:", r2_rf)

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_linear, color='blue', label='Linear Regression')
plt.scatter(y_test, y_pred_rf, color='red', label='Random Forest Regressor')
plt.xlabel('Actual MPG')
plt.ylabel('Predicted MPG')
plt.title('Predicted MPG vs Actual MPG')
plt.legend()
plt.show()





